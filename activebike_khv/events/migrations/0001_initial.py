# Generated by Django 3.2.9 on 2022-12-03 14:37

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import events.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='About',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('text', models.TextField(blank=True)),
                ('text_html', models.TextField(blank=True, editable=False)),
            ],
            options={
                'verbose_name': 'О нас',
                'verbose_name_plural': 'О нас',
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='EventType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(unique=True)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Тип события',
                'verbose_name_plural': 'Типы событий',
            },
        ),
        migrations.CreateModel(
            name='ImageAlbum',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Альбом', max_length=100)),
            ],
            options={
                'verbose_name': 'Альбом',
                'verbose_name_plural': 'Альбомы',
            },
        ),
        migrations.CreateModel(
            name='Ip',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip', models.CharField(max_length=100)),
                ('date_edit', models.DateTimeField(auto_now=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Link',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=200)),
                ('url', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('date_pub', models.DateTimeField(auto_now_add=True)),
                ('date_edit', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Ссылка',
                'verbose_name_plural': 'Ссылки',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='SurfaceType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='Тип покрытия')),
            ],
            options={
                'verbose_name': 'Тип дорожного покрытия',
                'verbose_name_plural': 'Типы дорожных покрытий',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='Название тега')),
            ],
            options={
                'verbose_name': 'Тег',
                'verbose_name_plural': 'Теги',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Название')),
                ('text', models.TextField(blank=True, verbose_name='Описание')),
                ('text_html', models.TextField(blank=True, editable=False, verbose_name='отформатированное описание')),
                ('date_pub', models.DateTimeField(auto_now_add=True, verbose_name='Дата публикации')),
                ('date_edit', models.DateTimeField(auto_now=True, verbose_name='Дата правки')),
                ('album', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='model', to='events.imagealbum', verbose_name='Альбом фото')),
                ('tags', models.ManyToManyField(blank=True, to='events.Tag', verbose_name='Теги')),
                ('views', models.ManyToManyField(blank=True, editable=False, to='events.Ip', verbose_name='Просмотры')),
            ],
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('image', models.ImageField(upload_to='posts/images/')),
                ('default', models.BooleanField(default=False)),
                ('width', models.FloatField(default=100)),
                ('length', models.FloatField(default=100)),
                ('album', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='events.imagealbum')),
            ],
        ),
        migrations.CreateModel(
            name='Route',
            fields=[
                ('post_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='events.post')),
                ('track', models.FileField(blank=True, null=True, upload_to=events.models.user_directory_path, verbose_name='GPX-трек (необязательно)')),
                ('length', models.DecimalField(decimal_places=2, default=0, max_digits=7, null=True, verbose_name='Дистанция, км')),
                ('height_gain', models.PositiveSmallIntegerField(default=0, null=True, verbose_name='Набор высоты, м')),
                ('image', models.FileField(blank=True, upload_to='routes/images', verbose_name='Скрин маршрута')),
                ('url', models.CharField(blank=True, max_length=200, null=True, verbose_name='ссылка на внешний ресурс с треком (необязательно)')),
                ('polyline', models.TextField(blank=True, editable=False, verbose_name='Полилиния (генерируется автоматически при загрузке трека GPX)')),
                ('author', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='routes', to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('surface_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='routes', to='events.surfacetype', verbose_name='Покрытие')),
                ('type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='routes', to='events.eventtype', verbose_name='Тип активности')),
            ],
            options={
                'verbose_name': 'Маршрут',
                'verbose_name_plural': 'Маршруты',
                'ordering': ['-date_pub'],
            },
            bases=('events.post',),
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('post_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='events.post')),
                ('image', models.ImageField(blank=True, upload_to='reports/', verbose_name='Картинка')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Отчет',
                'verbose_name_plural': 'Отчеты',
                'ordering': ['-date_pub'],
            },
            bases=('events.post',),
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('post_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='events.post')),
                ('image', models.ImageField(blank=True, upload_to='events/', verbose_name='Картинка')),
                ('date_planned', models.DateTimeField()),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='posts', to=settings.AUTH_USER_MODEL)),
                ('event_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='events', to='events.eventtype')),
            ],
            options={
                'verbose_name': 'Событие',
                'verbose_name_plural': 'События',
                'ordering': ['-date_planned'],
            },
            bases=('events.post',),
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('post_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='events.post')),
                ('image', models.ImageField(blank=True, upload_to='articles/', verbose_name='Картинка')),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='articles', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Статья',
                'verbose_name_plural': 'Статьи',
                'ordering': ['-date_pub'],
            },
            bases=('events.post',),
        ),
    ]
